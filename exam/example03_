# 기존에 a3 데이터베이스가 존재 한다면 삭제
DROP DATABASE IF EXISTS a3;

# 새 데이터베이스(`a3`) 생성
CREATE DATABASE a3;

# 새 데이터베이스(`a3`) 선택
USE a3;

# 사원(emp) 테이블 생성 및 홍길동사원(홍보부서), 홍길순사원(홍보부서), 임꺽정사원(기획부서) 추가
CREATE TABLE emp (
    id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    PRIMARY KEY(id),
    regDate DATETIME NOT NULL,
    `name` CHAR(100) NOT NULL,
    deptName CHAR(100) NOT NULL
);

DESC emp;

INSERT INTO emp
SET regDate = NOW(),
`name` = '홍길동',
deptName = '홍보';

INSERT INTO emp
SET regDate = NOW(),
`name` = '홍길순',
deptName = '홍보';

INSERT INTO emp
SET regDate = NOW(),
`name` = '임꺽정',
deptName = '기획';

SELECT * FROM emp;

## deptName을 위처럼 입력받을 수 있도록 만든다면 안전성이 없다.
## 중복되지 않는 데이터들은 무조건 id값을 가지는게 좋다.

# 부서(dept) 테이블 생성 및 홍보부서 기획부서 추가
CREATE TABLE dept (
    id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    PRIMARY KEY(id),
    regDate DATETIME NOT NULL,
    `name` CHAR(100) NOT NULL UNIQUE
);

INSERT INTO dept
SET regDate = NOW(),
`name` = '홍보';

INSERT INTO dept
SET regDate = NOW(),
`name` = '기획';

SELECT * FROM dept;

# 구조를 변경하기로 결정(사원 테이블에서, 이제는 부서를 이름이 아닌 번호로 기억)
# emp 테이블에서 deptName 삭제
ALTER TABLE emp DROP deptName;

DESC emp;
# emp 테이블에서 deptId 추가
ALTER TABLE emp ADD COLUMN deptId INT(10) UNSIGNED NOT NULL;

# 홍길동, 홍길순 deptId =1
# 임꺽정 deptId = 2로 수정
UPDATE emp
SET deptId = 1
WHERE `name` = '홍길동' OR `name` = '홍길순';

UPDATE emp
SET deptId = 2
WHERE `name` = '임꺽정';

# 사장님께 드릴 인명록을 생성
SELECT * FROM emp;

# 사장님께서 부서번호가 아니라 부서명을 알고 싶어하신다.
# 그래서 dept 테이블 조회법을 알려드리고 혼이 났다.
SELECT * FROM dept;

# 사장님께 드릴 인명록을 생성(v2, 부서명 포함, ON 없이 모든 경우의 수)
# 이상한 데이터가 생성되어서 혼남
SELECT *
FROM emp
INNER JOIN dept;

# 사장님께 드릴 인명록을 생성(v3, 부서명 포함, 올바른 조인 룰(ON) 적용)
# 보고용으로 좀 더 편하게 보여지도록 고쳐야 한다고 지적받음
SELECT emp.regDate, emp.name, dept.name
FROM emp
INNER JOIN dept
ON emp.deptId = dept.id;

# 사장님께 드릴 인명록을 생성(v4, 사장님께서 보시기에 편한 칼럼명(AS))
SELECT emp.regDate AS 입사일, emp.name AS 사원명, dept.name AS 부서명
FROM emp
INNER JOIN dept
ON emp.deptId = dept.id;

###

# 부서(dept) 테이블에 영업부 추가
INSERT INTO dept
SET regDate = NOW(),
`name` = '영업';

# 부서(dept) 테이블에 영업부 추가
INSERT INTO dept
SET regDate = NOW(),
`name` = '무역';

SELECT * FROM dept;
DESC emp;

# 사원(emp) 테이블에 김선달사원(영업부서) 추가
INSERT INTO emp
SET regDate = NOW(),
`name` = '김선달',
deptId = 3;

# 회사에 스파이가 등장했다.
# 내부 시스템에 소속되지 않았지만 사원증을 가지고 돌아다닌다.
# 스파이사원 추가
INSERT INTO emp
SET regDate = NOW(),
`name` = '스파이';

SELECT * FROM emp;
SELECT * FROM dept;

# https://yongku.tistory.com/entry/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4DB-JOININNER-JOIN-LEFT-JOIN-RIGHT-JOIN-OUTER-JOIN-%EC%A0%95%EB%A6%AC

# 교집합(A INNER JOIN B) : ON 키를 기준으로 A, B 테이블에서 겹치는 데이터 참조
# 부서에 소속한 사람들의 인명록(칼럼 : 입사일, 사원명, 부서명)을 생성해서 사장님께 보고
SELECT e.regDate AS 입사일, e.name AS 사원명, d.name AS 부서명
FROM emp AS e
INNER JOIN dept AS d
ON e.deptId = d.id;

## 분명 5명을 보았는데 인명록에는 4명만 존재한다?

# A 집합(A LEFT JOIN B) : ON 키를 기준으로 겹치는 데이터 중 A 테이블은 무조건 참조
# 부서에 소속안한 사람들까지 포함한 인명록(칼럼 : 입사일, 사원명, 부서명)을 생성해서 사장님께 보고
SELECT e.regDate AS 입사일, e.name AS 사원명, d.name AS 부서명
FROM emp AS e
LEFT JOIN dept AS d
ON e.deptId = d.id;

# 차집합(A LEFT JOIN B) : ON 키를 기준으로 A 테이블에만 존재하는 데이터 참조
# 부서에 소속안한 사람만 포함한 인명록(칼럼 : 입사일, 사원명, 부서명)을 생성해서 사장님께 보고
SELECT e.regDate AS 입사일, e.name AS 사원명, d.name AS 부서명
FROM emp AS e
LEFT JOIN dept AS d
ON e.deptId = d.id
WHERE d.id IS NULL;

## 스파이의 정체가 탄로났다!
## 사장님은 기업 시스템 재정비를 위해 모든 데이터를 참조하기 원하신다.

# 합집합(FULL OUTER JOIN) : 전체 데이터를 참조
# MySQL은 FULL OUTER JOIN을 지원하지 않습니다.
# 모든 회사 사람들과 부서의 데이터를 생성해서 사장님께 보고
SELECT *
FROM emp
LEFT JOIN dept
ON emp.deptId = dept.id
UNION
SELECT *
FROM emp
RIGHT JOIN dept
ON emp.deptId = dept.id;